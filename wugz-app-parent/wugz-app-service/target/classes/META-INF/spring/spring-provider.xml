<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd        
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd     
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd  
    http://code.alibabatech.com/schema/dubbo        
    http://code.alibabatech.com/schema/dubbo/dubbo.xsd">
    
    <!-- 启动Spring注解 -->
    <context:annotation-config />
	<dubbo:annotation />
	<context:component-scan base-package="com.wugz.app">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!-- 加载配置文件  -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
            <list>  
               <value>classpath:config/dubbo-config.properties</value>  
               <value>classpath:config/jdbc.properties</value>  
            </list>  
        </property>  
    </bean>
    
    <!-- 提供方应用信息，用于计算依赖关系 -->
	<dubbo:application name="wugz-app-service" />
	<!-- 使用zookeeper广播注册中心暴露服务地址 -->
	<dubbo:registry protocol="zookeeper" address="${dubboServer.address}" />
	<!-- 用dubbo协议在20880端口暴露服务 -->
	<dubbo:protocol id="DUBBOInnerService" name="dubbo" port="20880" />
	<!-- 服务提供者全局配置 -->
	<dubbo:provider protocol="DUBBOInnerService" delay="-1"
		cluster="failfast" timeout="3000000" />	
	
	<!-- 配置数据源 使用的是Druid数据源 -->  
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"  
        init-method="init" destroy-method="close"> 
        <property name="driverClassName" value="${jdbc.driver}" /> 
        <property name="url" value="${jdbc.url}" />  
        <property name="username" value="${jdbc.username}" />  
        <property name="password" value="${jdbc.password}" />  
  
        <!-- 初始化连接大小 -->  
        <property name="initialSize" value="0" />  
        <!-- 连接池最大使用连接数量 -->  
        <property name="maxActive" value="20" />  
  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="0" />  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="60000" />  
        <property name="poolPreparedStatements" value="true" />  
        <property name="maxPoolPreparedStatementPerConnectionSize"  
            value="33" />  
        <!-- 用来检测有效sql -->  
        <property name="validationQuery" value="${validationQuery}" />  
        <property name="testOnBorrow" value="false" />  
        <property name="testOnReturn" value="false" />  
        <property name="testWhileIdle" value="true" />  
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
        <property name="timeBetweenEvictionRunsMillis" value="60000" />  
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
        <property name="minEvictableIdleTimeMillis" value="25200000" />  
        <!-- 打开removeAbandoned功能 -->  
        <property name="removeAbandoned" value="true" />  
        <!-- 1800秒，也就是30分钟 -->  
        <property name="removeAbandonedTimeout" value="1800" />  
        <!-- 关闭abanded连接时输出错误日志 -->  
        <property name="logAbandoned" value="true" />  
        <!-- 监控数据库 -->  
        <property name="filters" value="mergeStat" />  
    </bean>  
    
    <!-- myBatis文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <property name="configLocation">
			<value>classpath:config/mybatis-config.xml</value>
		</property>
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->  
        <property name="mapperLocations" value="classpath*:daos/**/*Dao.xml" />  
    </bean>  
    <!-- 扫描接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.wugz.app" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />  
    </bean>  
    
    <!-- 配置事务 -->
    <bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
    <!-- 可通过注解控制事务 -->
	<tx:annotation-driven  transaction-manager="transactionManager" proxy-target-class="true"/>
    
    <!-- 加载Log4j配置
    <bean id="log4j"  class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    	<property name="targetClass" value="org.springframework.util.Log4jConfigurer"/>
    	<property name="targetMethod" value="initLogging" />
    	<property name="arguments">
    		<list>
    			<value>classpath:config/log4j.properties</value>
    		</list>
    	</property>
    </bean>
     -->
</beans>